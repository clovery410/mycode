import collections
class Solution(object):
    def longestSubstring(self, s, k):
        def helper(start, end):
            if end - start < k:
                return 0
            counter = collections.defaultdit(int)
            for c in s:
                counter[c] += 1

            for mid in xrange(start, end):
                c = s[mid]
                if counter[c] >= k:
                    continue
                return max(helper(start, mid), helper(mid+1, end))
            
            return end - start
        
        s = list(s)
        return helper(0, len(s))
    
        counter = collections.defaultdict(int)
        visited = [0] * 26
        i = 0
        start_idx = 0
        max_len = 0
        
        for c in s:
            counter[c] += 1

        while i < len(s):
            c = s[i]
            
            if counter[c] >= k:
                visited[ord(c) - ord('a')] += 1
                i += 1
                continue

            for j in xrange(start_idx, i):
                if all(x == 0 or x >= k for x in visited):
                    max_len = max(max_len, i - j)
                counter[s[j]] -= 1
                visited[ord(s[j]) - ord('a')] -= 1
                
            start_idx = i
            while start_idx < len(s) and counter[s[start_idx]] < k:
                counter[s[start_idx]] -= 1
                start_idx += 1
                
            i = start_idx

        if all(x == 0 or x >= k for x in visited):
            max_len = max(max_len, i - start_idx)
        return max_len

if __name__ == "__main__":
    sol = Solution()
    s = "baaabcb"
    print sol.longestSubstring(s, 3)
